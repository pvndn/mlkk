{"version":3,"sources":["main.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["$(document).ready(function(){\n    $.get(window.location.href);\n});\n\n(function($) {\n  var _ajax = $.ajax,\n      mockHandlers = [],\n      mockedAjaxCalls = [],\n      CALLBACK_REGEX = /=\\?(&|$)/,\n      jsc = (new Date()).getTime();\n\n\n  // Parse the given XML string.\n  function parseXML(xml) {\n      if (window.DOMParser == undefined && window.ActiveXObject) {\n          DOMParser = function() {};\n          DOMParser.prototype.parseFromString = function(xmlString) {\n              var doc = new ActiveXObject('Microsoft.XMLDOM');\n              doc.async = 'false';\n              doc.loadXML(xmlString);\n              return doc;\n          };\n      }\n\n      try {\n          var xmlDoc = (new DOMParser()).parseFromString(xml, 'text/xml');\n          if ($.isXMLDoc(xmlDoc)) {\n              var err = $('parsererror', xmlDoc);\n              if (err.length == 1) {\n                  throw ('Error: ' + $(xmlDoc).text());\n              }\n          } else {\n              throw ('Unable to parse XML');\n          }\n          return xmlDoc;\n      } catch (e) {\n          var msg = (e.name == undefined ? e : e.name + ': ' + e.message);\n          $(document).trigger('xmlParseError', [msg]);\n          return undefined;\n      }\n  }\n\n  // Trigger a jQuery event\n  function trigger(s, type, args) {\n      (s.context ? $(s.context) : $.event).trigger(type, args);\n  }\n\n  // Check if the data field on the mock handler and the request match. This\n  // can be used to restrict a mock handler to being used only when a certain\n  // set of data is passed to it.\n  function isMockDataEqual(mock, live) {\n      var identical = true;\n      // Test for situations where the data is a querystring (not an object)\n      if (typeof live === 'string') {\n          // Querystring may be a regex\n          return $.isFunction(mock.test) ? mock.test(live) : mock == live;\n      }\n      $.each(mock, function(k) {\n          if (live[k] === undefined) {\n              identical = false;\n              return identical;\n          } else {\n              // This will allow to compare Arrays\n              if (typeof live[k] === 'object' && live[k] !== null) {\n                  identical = identical && isMockDataEqual(mock[k], live[k]);\n              } else {\n                  if (mock[k] && $.isFunction(mock[k].test)) {\n                      identical = identical && mock[k].test(live[k]);\n                  } else {\n                      identical = identical && (mock[k] == live[k]);\n                  }\n              }\n          }\n      });\n\n      return identical;\n  }\n\n  // See if a mock handler property matches the default settings\n  function isDefaultSetting(handler, property) {\n      return handler[property] === $.mockjaxSettings[property];\n  }\n\n  // Check the given handler should mock the given request\n  function getMockForRequest(handler, requestSettings) {\n      // If the mock was registered with a function, let the function decide if we\n      // want to mock this request\n      if ($.isFunction(handler)) {\n          return handler(requestSettings);\n      }\n\n      // Inspect the URL of the request and check if the mock handler's url\n      // matches the url for this ajax request\n      if ($.isFunction(handler.url.test)) {\n          // The user provided a regex for the url, test it\n          if (!handler.url.test(requestSettings.url)) {\n              return null;\n          }\n      } else {\n          // Look for a simple wildcard '*' or a direct URL match\n          var star = handler.url.indexOf('*');\n          if (handler.url !== requestSettings.url && star === -1 || !new RegExp(handler.url.replace(/[-[\\]{}()+?.,\\\\^$|#\\s]/g, \"\\\\$&\").replace(/\\*/g, '.+')).test(requestSettings.url)) {\n              return null;\n          }\n      }\n\n      // Inspect the data submitted in the request (either POST body or GET query string)\n      if (handler.data && requestSettings.data) {\n          if (!isMockDataEqual(handler.data, requestSettings.data)) {\n              // They're not identical, do not mock this request\n              return null;\n          }\n      }\n      // Inspect the request type\n      if (handler && handler.type && handler.type.toLowerCase() != requestSettings.type.toLowerCase()) {\n          // The request type doesn't match (GET vs. POST)\n          return null;\n      }\n\n      return handler;\n  }\n\n  // Process the xhr objects send operation\n  function _xhrSend(mockHandler, requestSettings, origSettings) {\n\n      // This is a substitute for < 1.4 which lacks $.proxy\n      var process = (function(that) {\n          return function() {\n              return (function() {\n                  var onReady;\n\n                  // The request has returned\n                  this.status = mockHandler.status;\n                  this.statusText = mockHandler.statusText;\n                  this.readyState = 4;\n\n                  // We have an executable function, call it to give\n                  // the mock handler a chance to update it's data\n                  if ($.isFunction(mockHandler.response)) {\n                      mockHandler.response(origSettings);\n                  }\n                  // Copy over our mock to our xhr object before passing control back to\n                  // jQuery's onreadystatechange callback\n                  if (requestSettings.dataType == 'json' && (typeof mockHandler.responseText == 'object')) {\n                      this.responseText = JSON.stringify(mockHandler.responseText);\n                  } else if (requestSettings.dataType == 'xml') {\n                      if (typeof mockHandler.responseXML == 'string') {\n                          this.responseXML = parseXML(mockHandler.responseXML);\n                          //in jQuery 1.9.1+, responseXML is processed differently and relies on responseText\n                          this.responseText = mockHandler.responseXML;\n                      } else {\n                          this.responseXML = mockHandler.responseXML;\n                      }\n                  } else {\n                      this.responseText = mockHandler.responseText;\n                  }\n                  if (typeof mockHandler.status == 'number' || typeof mockHandler.status == 'string') {\n                      this.status = mockHandler.status;\n                  }\n                  if (typeof mockHandler.statusText === \"string\") {\n                      this.statusText = mockHandler.statusText;\n                  }\n                  // jQuery 2.0 renamed onreadystatechange to onload\n                  onReady = this.onreadystatechange || this.onload;\n\n                  // jQuery < 1.4 doesn't have onreadystate change for xhr\n                  if ($.isFunction(onReady)) {\n                      if (mockHandler.isTimeout) {\n                          this.status = -1;\n                      }\n                      onReady.call(this, mockHandler.isTimeout ? 'timeout' : undefined);\n                  } else if (mockHandler.isTimeout) {\n                      // Fix for 1.3.2 timeout to keep success from firing.\n                      this.status = -1;\n                  }\n              }).apply(that);\n          };\n      })(this);\n\n      if (mockHandler.proxy) {\n          // We're proxying this request and loading in an external file instead\n          _ajax({\n              global: false,\n              url: mockHandler.proxy,\n              type: mockHandler.proxyType,\n              data: mockHandler.data,\n              dataType: requestSettings.dataType === \"script\" ? \"text/plain\" : requestSettings.dataType,\n              complete: function(xhr) {\n                  mockHandler.responseXML = xhr.responseXML;\n                  mockHandler.responseText = xhr.responseText;\n                  // Don't override the handler status/statusText if it's specified by the config\n                  if (isDefaultSetting(mockHandler, 'status')) {\n                      mockHandler.status = xhr.status;\n                  }\n                  if (isDefaultSetting(mockHandler, 'statusText')) {\n                      mockHandler.statusText = xhr.statusText;\n                  }\n\n                  this.responseTimer = setTimeout(process, mockHandler.responseTime || 0);\n              }\n          });\n      } else {\n          // type == 'POST' || 'GET' || 'DELETE'\n          if (requestSettings.async === false) {\n              // TODO: Blocking delay\n              process();\n          } else {\n              this.responseTimer = setTimeout(process, mockHandler.responseTime || 50);\n          }\n      }\n  }\n\n  // Construct a mocked XHR Object\n  function xhr(mockHandler, requestSettings, origSettings, origHandler) {\n      // Extend with our default mockjax settings\n      mockHandler = $.extend(true, {}, $.mockjaxSettings, mockHandler);\n\n      if (typeof mockHandler.headers === 'undefined') {\n          mockHandler.headers = {};\n      }\n      if (mockHandler.contentType) {\n          mockHandler.headers['content-type'] = mockHandler.contentType;\n      }\n\n      return {\n          status: mockHandler.status,\n          statusText: mockHandler.statusText,\n          readyState: 1,\n          open: function() {},\n          send: function() {\n              origHandler.fired = true;\n              _xhrSend.call(this, mockHandler, requestSettings, origSettings);\n          },\n          abort: function() {\n              clearTimeout(this.responseTimer);\n          },\n          setRequestHeader: function(header, value) {\n              mockHandler.headers[header] = value;\n          },\n          getResponseHeader: function(header) {\n              // 'Last-modified', 'Etag', 'content-type' are all checked by jQuery\n              if (mockHandler.headers && mockHandler.headers[header]) {\n                  // Return arbitrary headers\n                  return mockHandler.headers[header];\n              } else if (header.toLowerCase() == 'last-modified') {\n                  return mockHandler.lastModified || (new Date()).toString();\n              } else if (header.toLowerCase() == 'etag') {\n                  return mockHandler.etag || '';\n              } else if (header.toLowerCase() == 'content-type') {\n                  return mockHandler.contentType || 'text/plain';\n              }\n          },\n          getAllResponseHeaders: function() {\n              var headers = '';\n              $.each(mockHandler.headers, function(k, v) {\n                  headers += k + ': ' + v + \"\\n\";\n              });\n              return headers;\n          }\n      };\n  }\n\n  // Process a JSONP mock request.\n  function processJsonpMock(requestSettings, mockHandler, origSettings) {\n      // Handle JSONP Parameter Callbacks, we need to replicate some of the jQuery core here\n      // because there isn't an easy hook for the cross domain script tag of jsonp\n\n      processJsonpUrl(requestSettings);\n\n      requestSettings.dataType = \"json\";\n      if (requestSettings.data && CALLBACK_REGEX.test(requestSettings.data) || CALLBACK_REGEX.test(requestSettings.url)) {\n          createJsonpCallback(requestSettings, mockHandler, origSettings);\n\n          // We need to make sure\n          // that a JSONP style response is executed properly\n\n          var rurl = /^(\\w+:)?\\/\\/([^\\/?#]+)/,\n              parts = rurl.exec(requestSettings.url),\n              remote = parts && (parts[1] && parts[1] !== location.protocol || parts[2] !== location.host);\n\n          requestSettings.dataType = \"script\";\n          if (requestSettings.type.toUpperCase() === \"GET\" && remote) {\n              var newMockReturn = processJsonpRequest(requestSettings, mockHandler, origSettings);\n\n              // Check if we are supposed to return a Deferred back to the mock call, or just\n              // signal success\n              if (newMockReturn) {\n                  return newMockReturn;\n              } else {\n                  return true;\n              }\n          }\n      }\n      return null;\n  }\n\n  // Append the required callback parameter to the end of the request URL, for a JSONP request\n  function processJsonpUrl(requestSettings) {\n      if (requestSettings.type.toUpperCase() === \"GET\") {\n          if (!CALLBACK_REGEX.test(requestSettings.url)) {\n              requestSettings.url += (/\\?/.test(requestSettings.url) ? \"&\" : \"?\") + (requestSettings.jsonp || \"callback\") + \"=?\";\n          }\n      } else if (!requestSettings.data || !CALLBACK_REGEX.test(requestSettings.data)) {\n          requestSettings.data = (requestSettings.data ? requestSettings.data + \"&\" : \"\") + (requestSettings.jsonp || \"callback\") + \"=?\";\n      }\n  }\n\n  // Process a JSONP request by evaluating the mocked response text\n  function processJsonpRequest(requestSettings, mockHandler, origSettings) {\n      // Synthesize the mock request for adding a script tag\n      var callbackContext = origSettings && origSettings.context || requestSettings,\n          newMock = null;\n\n\n      // If the response handler on the moock is a function, call it\n      if (mockHandler.response && $.isFunction(mockHandler.response)) {\n          mockHandler.response(origSettings);\n      } else {\n\n          // Evaluate the responseText javascript in a global context\n          if (typeof mockHandler.responseText === 'object') {\n              $.globalEval('(' + JSON.stringify(mockHandler.responseText) + ')');\n          } else {\n              $.globalEval('(' + mockHandler.responseText + ')');\n          }\n      }\n\n      // Successful response\n      jsonpSuccess(requestSettings, callbackContext, mockHandler);\n      jsonpComplete(requestSettings, callbackContext, mockHandler);\n\n      // If we are running under jQuery 1.5+, return a deferred object\n      if ($.Deferred) {\n          newMock = new $.Deferred();\n          if (typeof mockHandler.responseText == \"object\") {\n              newMock.resolveWith(callbackContext, [mockHandler.responseText]);\n          } else {\n              newMock.resolveWith(callbackContext, [$.parseJSON(mockHandler.responseText)]);\n          }\n      }\n      return newMock;\n  }\n\n\n  // Create the required JSONP callback function for the request\n  function createJsonpCallback(requestSettings, mockHandler, origSettings) {\n      var callbackContext = origSettings && origSettings.context || requestSettings;\n      var jsonp = requestSettings.jsonpCallback || (\"jsonp\" + jsc++);\n\n      // Replace the =? sequence both in the query string and the data\n      if (requestSettings.data) {\n          requestSettings.data = (requestSettings.data + \"\").replace(CALLBACK_REGEX, \"=\" + jsonp + \"$1\");\n      }\n\n      requestSettings.url = requestSettings.url.replace(CALLBACK_REGEX, \"=\" + jsonp + \"$1\");\n\n\n      // Handle JSONP-style loading\n      window[jsonp] = window[jsonp] || function(tmp) {\n          data = tmp;\n          jsonpSuccess(requestSettings, callbackContext, mockHandler);\n          jsonpComplete(requestSettings, callbackContext, mockHandler);\n          // Garbage collect\n          window[jsonp] = undefined;\n\n          try {\n              delete window[jsonp];\n          } catch (e) {}\n\n          if (head) {\n              head.removeChild(script);\n          }\n      };\n  }\n\n  // The JSONP request was successful\n  function jsonpSuccess(requestSettings, callbackContext, mockHandler) {\n      // If a local callback was specified, fire it and pass it the data\n      if (requestSettings.success) {\n          requestSettings.success.call(callbackContext, mockHandler.responseText || \"\", status, {});\n      }\n\n      // Fire the global callback\n      if (requestSettings.global) {\n          trigger(requestSettings, \"ajaxSuccess\", [{},\n          requestSettings]);\n      }\n  }\n\n  // The JSONP request was completed\n  function jsonpComplete(requestSettings, callbackContext) {\n      // Process result\n      if (requestSettings.complete) {\n          requestSettings.complete.call(callbackContext, {}, status);\n      }\n\n      // The request was completed\n      if (requestSettings.global) {\n          trigger(\"ajaxComplete\", [{},\n          requestSettings]);\n      }\n\n      // Handle the global AJAX counter\n      if (requestSettings.global && !--$.active) {\n          $.event.trigger(\"ajaxStop\");\n      }\n  }\n\n\n  // The core $.ajax replacement.\n  function handleAjax(url, origSettings) {\n      var mockRequest, requestSettings, mockHandler;\n\n      // If url is an object, simulate pre-1.5 signature\n      if (typeof url === \"object\") {\n          origSettings = url;\n          url = undefined;\n      } else {\n          // work around to support 1.5 signature\n          origSettings.url = url;\n      }\n\n      // Extend the original settings for the request\n      requestSettings = $.extend(true, {}, $.ajaxSettings, origSettings);\n\n      // Iterate over our mock handlers (in registration order) until we find\n      // one that is willing to intercept the request\n      for (var k = 0; k < mockHandlers.length; k++) {\n          if (!mockHandlers[k]) {\n              continue;\n          }\n\n          mockHandler = getMockForRequest(mockHandlers[k], requestSettings);\n          if (!mockHandler) {\n              // No valid mock found for this request\n              continue;\n          }\n\n          mockedAjaxCalls.push(requestSettings);\n\n          // If logging is enabled, log the mock to the console\n          $.mockjaxSettings.log(mockHandler, requestSettings);\n\n\n          if (requestSettings.dataType === \"jsonp\") {\n              if ((mockRequest = processJsonpMock(requestSettings, mockHandler, origSettings))) {\n                  // This mock will handle the JSONP request\n                  return mockRequest;\n              }\n          }\n\n\n          // Removed to fix #54 - keep the mocking data object intact\n          //mockHandler.data = requestSettings.data;\n\n          mockHandler.cache = requestSettings.cache;\n          mockHandler.timeout = requestSettings.timeout;\n          mockHandler.global = requestSettings.global;\n\n          copyUrlParameters(mockHandler, origSettings);\n\n          (function(mockHandler, requestSettings, origSettings, origHandler) {\n              mockRequest = _ajax.call($, $.extend(true, {}, origSettings, {\n                  // Mock the XHR object\n                  xhr: function() {\n                      return xhr(mockHandler, requestSettings, origSettings, origHandler);\n                  }\n              }));\n          })(mockHandler, requestSettings, origSettings, mockHandlers[k]);\n\n          return mockRequest;\n      }\n\n      // We don't have a mock request\n      if ($.mockjaxSettings.throwUnmocked === true) {\n          throw ('AJAX not mocked: ' + origSettings.url);\n      } else { // trigger a normal request\n          return _ajax.apply($, [origSettings]);\n      }\n  }\n\n  /**\n   * Copies URL parameter values if they were captured by a regular expression\n   * @param {Object} mockHandler\n   * @param {Object} origSettings\n   */\n  function copyUrlParameters(mockHandler, origSettings) {\n      //parameters aren't captured if the URL isn't a RegExp\n      if (!(mockHandler.url instanceof RegExp)) {\n          return;\n      }\n      //if no URL params were defined on the handler, don't attempt a capture\n      if (!mockHandler.hasOwnProperty('urlParams')) {\n          return;\n      }\n      var captures = mockHandler.url.exec(origSettings.url);\n      //the whole RegExp match is always the first value in the capture results\n      if (captures.length === 1) {\n          return;\n      }\n      captures.shift();\n      //use handler params as keys and capture resuts as values\n      var i = 0,\n          capturesLength = captures.length,\n          paramsLength = mockHandler.urlParams.length,\n          //in case the number of params specified is less than actual captures\n          maxIterations = Math.min(capturesLength, paramsLength),\n          paramValues = {};\n      for (i; i < maxIterations; i++) {\n          var key = mockHandler.urlParams[i];\n          paramValues[key] = captures[i];\n      }\n      origSettings.urlParams = paramValues;\n  }\n\n\n  // Public\n\n  $.extend({\n      ajax: handleAjax\n  });\n\n  $.mockjaxSettings = {\n      //url:        null,\n      //type:       'GET',\n      log: function(mockHandler, requestSettings) {\n          if (mockHandler.logging === false || (typeof mockHandler.logging === 'undefined' && $.mockjaxSettings.logging === false)) {\n              return;\n          }\n          if (window.console && console.log) {\n              var message = 'MOCK ' + requestSettings.type.toUpperCase() + ': ' + requestSettings.url;\n              var request = $.extend({}, requestSettings);\n\n              if (typeof console.log === 'function') {\n                  // console.log(message, request);\n              } else {\n                  try {\n                      console.log(message + ' ' + JSON.stringify(request));\n                  } catch (e) {\n                      console.log(message);\n                  }\n              }\n          }\n      },\n      logging: true,\n      status: 200,\n      statusText: \"OK\",\n      responseTime: 500,\n      isTimeout: false,\n      throwUnmocked: false,\n      contentType: 'text/plain',\n      response: '',\n      responseText: '',\n      responseXML: '',\n      proxy: '',\n      proxyType: 'GET',\n\n      lastModified: null,\n      etag: '',\n      headers: {\n          etag: 'IJF@H#@923uf8023hFO@I#H#',\n          'content-type': 'text/plain'\n      }\n  };\n\n  $.mockjax = function(settings) {\n      var i = mockHandlers.length;\n      mockHandlers[i] = settings;\n      return i;\n  };\n  $.mockjaxClear = function(i) {\n      if (arguments.length == 1) {\n          mockHandlers[i] = null;\n      } else {\n          mockHandlers = [];\n      }\n      mockedAjaxCalls = [];\n  };\n  $.mockjax.handler = function(i) {\n      if (arguments.length == 1) {\n          return mockHandlers[i];\n      }\n  };\n  $.mockjax.mockedAjaxCalls = function() {\n      return mockedAjaxCalls;\n  };\n})(jQuery);\n\n$.mockjax({ url: window.location.href, responseTime: 1500 });\n\n$(document).ready(function () {\n  var options = {\n\t\t\turl: _url,\n\n\t\t\tgetValue: \"name\",\n\n\t\t\ttemplate: {\n\t\t\t\ttype: \"custom\",\n\t\t\t\tmethod: function(value, item) {\n\t\t\t\t\treturn \"<a href='\" + item.link + \"'>\" + value +\" <img class='eac-icon' src='\" + item.image + \"' /></a>\";\n\t\t\t\t}\n\t\t\t}\n\t};\n\n\t$(\"#keywords\").easyAutocomplete(options);\n});\n\n$(document).ready(function() {\n  var patternEmail = new RegExp(/^[+a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/i);\n  var patternPhone = new RegExp(/^(0|\\+[0-9]{1,5})([1-9][0-9]{8}?([0-9]{0,1}))$/i);\n  $('#contactForm').submit(function(e) {\n\n    var name = $('input[name=name]').val();\n    var email = $('input[name=email]').val();\n    var phone = $('input[name=phone]').val();\n    var body = $('#_body').val();\n    var product = $('input[name=product]').val();\n\n\n    var link = $(this).attr('action');\n\n    if( name == '') {\n      swal({\n        title: \"<span class='glyphicon glyphicon-remove' style='color:red;'></span>\",\n        text: \"<span style='color:red; text-align: center'>Xin mời nhập họ tên<span>.\",\n        html: true\n      });\n      return false;\n    }\n\n    if(email == '') {\n      swal({\n        title: \"<span class='glyphicon glyphicon-remove' style='color:red;'></span>\",\n        text: \"<span style='color:red; text-align: center'>Xin mời nhập e-mail<span>.\",\n        html: true\n      });\n      return false;\n    }\n\n    if(!patternEmail.test(email)) {\n      swal({\n        title: \"<span class='glyphicon glyphicon-remove' style='color:red;'></span>\",\n        text: \"<span style='color:red; text-align: center'>Xin mời nhập đúng định dạng e-mail<span>.\",\n        html: true\n      });\n      return false;\n    }\n\n    if(phone == '') {\n      swal({\n        title: \"<span class='glyphicon glyphicon-remove' style='color:red;'></span>\",\n        text: \"<span style='color:red; text-align: center'>Xin mời nhập số điện thoại<span>.\",\n        html: true\n      });\n      return false;\n    }\n\n    if(!patternPhone.test(phone)) {\n      swal({\n        title: \"<span class='glyphicon glyphicon-remove' style='color:red;'></span>\",\n        text: \"<span style='color:red; text-align: center'>Xin mời nhập đúng định dạng số điện thoại<span>.\",\n        html: true\n      });\n      return false;\n    }\n\n    if(body == '') {\n      swal({\n        title: \"<span class='glyphicon glyphicon-remove' style='color:red;'></span>\",\n        text: \"<span style='color:red; text-align: center'>Nhập nội dung yêu cầu của bạn đến chúng tôi.<span>.\",\n        html: true\n      });\n      return false;\n    }\n\n    if(product == '') {\n      swal({\n        title: \"<span class='glyphicon glyphicon-remove' style='color:red;'></span>\",\n        text: \"<span style='color:red; text-align: center'>Hãy chọn sản phẩm bạn cần tư vấn.<span>.\",\n        html: true\n      });\n      return false;\n    }\n\n    var a = Math.floor((Math.random() * 100) + 1);\n    var b = Math.floor((Math.random() * 100) + 1);\n    var sum = parseInt(a) + parseInt(b);\n\n    swal({\n      title: \"Trả lời câu hỏi dưới đây:\",\n      text: a + \"+\" + b + '= ?',\n      type: \"input\",\n      showCancelButton: true,\n      closeOnConfirm: false,\n      animation: \"slide-from-top\",\n      inputPlaceholder: \"Write something\"\n    }, function(inputValue){\n        if (inputValue === false) return false;\n\n        if (isNaN(inputValue)) {\n          swal.showInputError(\"Mời nhập bằng số!\");\n          return false\n        }\n\n        if (inputValue === \"\") {\n          swal.showInputError(\"Bạn cần trả lời câu hỏi xác nhận!\");\n          return false\n        }\n\n        if (parseInt(inputValue) != sum) {\n          swal.showInputError(\"Câu trả lời chưa chính xác!\");\n          return false\n        }\n\n        var data = {\n          'name': name,\n          'email': email,\n          'phone': phone,\n          'body': body,\n          'product': product,\n          '_token': $('meta[name=\"csrf-token\"]').attr('content')\n        };\n\n        $.ajax({\n          url: link,\n          method: 'POST',\n          data: data,\n          success: function (result) {\n            swal({\n              title: '',\n               text: result,\n                type: \"success\"\n              },\n              function(){\n                setTimeout(function() {\n                  window.location.reload();\n                },500);\n            });\n          }\n        });\n      }\n    );\n\n    return false;\n  });\n});\n"],"sourceRoot":"/source/"}
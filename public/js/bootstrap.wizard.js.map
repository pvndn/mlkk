{"version":3,"sources":["jquery.bootstrap.wizard.js"],"names":[],"mappingsfile":"bootstrap.wizard.js","sourcesContent":["\n;(function($) {\nvar bootstrapWizardCreate = function(element, options) {\n\tvar element = $(element);\n\tvar obj = this;\n\n\t// selector skips any 'li' elements that do not contain a child with a tab data-toggle\n\tvar baseItemSelector = 'li:has([data-toggle=\"tab\"])';\n\n\t// Merge options with defaults\n\tvar $settings = $.extend({}, $.fn.bootstrapWizard.defaults, options);\n\tvar $activeTab = null;\n\tvar $navigation = null;\n\n\tthis.rebindClick = function(selector, fn)\n\t{\n\t\tselector.unbind('click', fn).bind('click', fn);\n\t}\n\n\tthis.fixNavigationButtons = function() {\n\t\t// Get the current active tab\n\t\tif(!$activeTab.length) {\n\t\t\t// Select first one\n\t\t\t$navigation.find('a:first').tab('show');\n\t\t\t$activeTab = $navigation.find(baseItemSelector + ':first');\n\t\t}\n\n\t\t// See if we're currently in the first/last then disable the previous and last buttons\n\t\t$($settings.previousSelector, element).toggleClass('disabled', (obj.firstIndex() >= obj.currentIndex()));\n\t\t$($settings.nextSelector, element).toggleClass('disabled', (obj.currentIndex() >= obj.navigationLength()));\n\n\t\t// We are unbinding and rebinding to ensure single firing and no double-click errors\n\t\tobj.rebindClick($($settings.nextSelector, element), obj.next);\n\t\tobj.rebindClick($($settings.previousSelector, element), obj.previous);\n\t\tobj.rebindClick($($settings.lastSelector, element), obj.last);\n\t\tobj.rebindClick($($settings.firstSelector, element), obj.first);\n\n\t\tif($settings.onTabShow && typeof $settings.onTabShow === 'function' && $settings.onTabShow($activeTab, $navigation, obj.currentIndex())===false){\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tthis.next = function(e) {\n\n\t\t// If we clicked the last then dont activate this\n\t\tif(element.hasClass('last')) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif($settings.onNext && typeof $settings.onNext === 'function' && $settings.onNext($activeTab, $navigation, obj.nextIndex())===false){\n\t\t\treturn false;\n\t\t}\n\n\t\t// Did we click the last button\n\t\t$index = obj.nextIndex();\n\t\tif($index > obj.navigationLength()) {\n\t\t} else {\n\t\t\t$navigation.find(baseItemSelector + ':eq('+$index+') a').tab('show');\n\t\t}\n\t};\n\n\tthis.previous = function(e) {\n\n\t\t// If we clicked the first then dont activate this\n\t\tif(element.hasClass('first')) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif($settings.onPrevious && typeof $settings.onPrevious === 'function' && $settings.onPrevious($activeTab, $navigation, obj.previousIndex())===false){\n\t\t\treturn false;\n\t\t}\n\n\t\t$index = obj.previousIndex();\n\t\tif($index < 0) {\n\t\t} else {\n\t\t\t$navigation.find(baseItemSelector + ':eq('+$index+') a').tab('show');\n\t\t}\n\t};\n\n\tthis.first = function(e) {\n\t\tif($settings.onFirst && typeof $settings.onFirst === 'function' && $settings.onFirst($activeTab, $navigation, obj.firstIndex())===false){\n\t\t\treturn false;\n\t\t}\n\n\t\t// If the element is disabled then we won't do anything\n\t\tif(element.hasClass('disabled')) {\n\t\t\treturn false;\n\t\t}\n\t\t$navigation.find(baseItemSelector + ':eq(0) a').tab('show');\n\n\t};\n\tthis.last = function(e) {\n\t\tif($settings.onLast && typeof $settings.onLast === 'function' && $settings.onLast($activeTab, $navigation, obj.lastIndex())===false){\n\t\t\treturn false;\n\t\t}\n\n\t\t// If the element is disabled then we won't do anything\n\t\tif(element.hasClass('disabled')) {\n\t\t\treturn false;\n\t\t}\n\t\t$navigation.find(baseItemSelector + ':eq('+obj.navigationLength()+') a').tab('show');\n\t};\n\tthis.currentIndex = function() {\n\t\treturn $navigation.find(baseItemSelector).index($activeTab);\n\t};\n\tthis.firstIndex = function() {\n\t\treturn 0;\n\t};\n\tthis.lastIndex = function() {\n\t\treturn obj.navigationLength();\n\t};\n\tthis.getIndex = function(e) {\n\t\treturn $navigation.find(baseItemSelector).index(e);\n\t};\n\tthis.nextIndex = function() {\n\t\treturn $navigation.find(baseItemSelector).index($activeTab) + 1;\n\t};\n\tthis.previousIndex = function() {\n\t\treturn $navigation.find(baseItemSelector).index($activeTab) - 1;\n\t};\n\tthis.navigationLength = function() {\n\t\treturn $navigation.find(baseItemSelector).length - 1;\n\t};\n\tthis.activeTab = function() {\n\t\treturn $activeTab;\n\t};\n\tthis.nextTab = function() {\n\t\treturn $navigation.find(baseItemSelector + ':eq('+(obj.currentIndex()+1)+')').length ? $navigation.find(baseItemSelector + ':eq('+(obj.currentIndex()+1)+')') : null;\n\t};\n\tthis.previousTab = function() {\n\t\tif(obj.currentIndex() <= 0) {\n\t\t\treturn null;\n\t\t}\n\t\treturn $navigation.find(baseItemSelector + ':eq('+parseInt(obj.currentIndex()-1)+')');\n\t};\n\tthis.show = function(index) {\n\t\tif (isNaN(index)) {\n\t\t\treturn element.find(baseItemSelector + ' a[href=#' + index + ']').tab('show');\n\t\t}\n\t\telse {\n\t\t\treturn element.find(baseItemSelector + ':eq(' + index + ') a').tab('show');\n\t\t}\n\t};\n\tthis.disable = function(index) {\n\t\t$navigation.find(baseItemSelector + ':eq('+index+')').addClass('disabled');\n\t};\n\tthis.enable = function(index) {\n\t\t$navigation.find(baseItemSelector + ':eq('+index+')').removeClass('disabled');\n\t};\n\tthis.hide = function(index) {\n\t\t$navigation.find(baseItemSelector + ':eq('+index+')').hide();\n\t};\n\tthis.display = function(index) {\n\t\t$navigation.find(baseItemSelector + ':eq('+index+')').show();\n\t};\n\tthis.remove = function(args) {\n\t\tvar $index = args[0];\n\t\tvar $removeTabPane = typeof args[1] != 'undefined' ? args[1] : false;\n\t\tvar $item = $navigation.find(baseItemSelector + ':eq('+$index+')');\n\n\t\t// Remove the tab pane first if needed\n\t\tif($removeTabPane) {\n\t\t\tvar $href = $item.find('a').attr('href');\n\t\t\t$($href).remove();\n\t\t}\n\n\t\t// Remove menu item\n\t\t$item.remove();\n\t};\n\n\tvar innerTabClick = function (e) {\n\t\t// Get the index of the clicked tab\n\t\tvar clickedIndex = $navigation.find(baseItemSelector).index($(e.currentTarget).parent(baseItemSelector));\n\t\tif($settings.onTabClick && typeof $settings.onTabClick === 'function' && $settings.onTabClick($activeTab, $navigation, obj.currentIndex(), clickedIndex)===false){\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tvar innerTabShown = function (e) {  // use shown instead of show to help prevent double firing\n\t\t$element = $(e.target).parent();\n\t\tvar nextTab = $navigation.find(baseItemSelector).index($element);\n\n\t\t// If it's disabled then do not change\n\t\tif($element.hasClass('disabled')) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif($settings.onTabChange && typeof $settings.onTabChange === 'function' && $settings.onTabChange($activeTab, $navigation, obj.currentIndex(), nextTab)===false){\n\t\t\t\treturn false;\n\t\t}\n\n\t\t$activeTab = $element; // activated tab\n\t\tobj.fixNavigationButtons();\n\t};\n\n\tthis.resetWizard = function() {\n\n\t\t// remove the existing handlers\n\t\t$('a[data-toggle=\"tab\"]', $navigation).off('click', innerTabClick);\n\t\t$('a[data-toggle=\"tab\"]', $navigation).off('shown shown.bs.tab', innerTabShown);\n\n\t\t// reset elements based on current state of the DOM\n\t\t$navigation = element.find('ul:first', element);\n\t\t$activeTab = $navigation.find(baseItemSelector + '.active', element);\n\n\t\t// re-add handlers\n\t\t$('a[data-toggle=\"tab\"]', $navigation).on('click', innerTabClick);\n\t\t$('a[data-toggle=\"tab\"]', $navigation).on('shown shown.bs.tab', innerTabShown);\n\n\t\tobj.fixNavigationButtons();\n\t};\n\n\t$navigation = element.find('ul:first', element);\n\t$activeTab = $navigation.find(baseItemSelector + '.active', element);\n\n\tif(!$navigation.hasClass($settings.tabClass)) {\n\t\t$navigation.addClass($settings.tabClass);\n\t}\n\n\t// Load onInit\n\tif($settings.onInit && typeof $settings.onInit === 'function'){\n\t\t$settings.onInit($activeTab, $navigation, 0);\n\t}\n\n\t// Load onShow\n\tif($settings.onShow && typeof $settings.onShow === 'function'){\n\t\t$settings.onShow($activeTab, $navigation, obj.nextIndex());\n\t}\n\n\t$('a[data-toggle=\"tab\"]', $navigation).on('click', innerTabClick);\n\n\t// attach to both shown and shown.bs.tab to support Bootstrap versions 2.3.2 and 3.0.0\n\t$('a[data-toggle=\"tab\"]', $navigation).on('shown shown.bs.tab', innerTabShown);\n};\n$.fn.bootstrapWizard = function(options) {\n\t//expose methods\n\tif (typeof options == 'string') {\n\t\tvar args = Array.prototype.slice.call(arguments, 1)\n\t\tif(args.length === 1) {\n\t\t\targs.toString();\n\t\t}\n\t\treturn this.data('bootstrapWizard')[options](args);\n\t}\n\treturn this.each(function(index){\n\t\tvar element = $(this);\n\t\t// Return early if this element already has a plugin instance\n\t\tif (element.data('bootstrapWizard')) return;\n\t\t// pass options to plugin constructor\n\t\tvar wizard = new bootstrapWizardCreate(element, options);\n\t\t// Store plugin object in this element's data\n\t\telement.data('bootstrapWizard', wizard);\n\t\t// and then trigger initial change\n\t\twizard.fixNavigationButtons();\n\t});\n};\n\n// expose options\n$.fn.bootstrapWizard.defaults = {\n\ttabClass:         'nav nav-pills',\n\tnextSelector:     '.wizard li.next',\n\tpreviousSelector: '.wizard li.previous',\n\tfirstSelector:    '.wizard li.first',\n\tlastSelector:     '.wizard li.last',\n\tonShow:           null,\n\tonInit:           null,\n\tonNext:           null,\n\tonPrevious:       null,\n\tonLast:           null,\n\tonFirst:          null,\n\tonTabChange:      null,\n\tonTabClick:       null,\n\tonTabShow:        null\n};\n\n})(jQuery);\n"],"sourceRoot":"/source/"}